###################################################################################################################################
# Registry for FAST v8 in the FAST Modularization Framework
# This Registry file is used to create FAST_Types which contains data used in the FAST glue code.
# It also contains copy, destroy, pack, and unpack routines associated with each defined data types.
# See the NWTC Programmer's Handbook for further information on the format/contents of this file.
#
# Entries are of the form
# <keyword>	<ModuleName/ModName>	<TypeName>	<FieldType>	<FieldName>	<Dims>	<IO>	<DNAME>	<DESCRIP>	<UNITS>
#
# Use ^ as a shortcut for the value in the same column from the previous line.
###################################################################################################################################
# File last committed $Date$
# (File) Revision #: $Rev$
# URL: $HeadURL$
###################################################################################################################################
# ...... Include files (definitions from NWTC Library and module components) ............................................................................
include	Registry_NWTC_Library.txt
usefrom	ElastoDyn_Registry.txt
usefrom	Registry_BeamDyn.txt
usefrom	ServoDyn_Registry.txt
usefrom	Registry-AD14.txt
usefrom	AeroDyn_Registry.txt
usefrom	SubDyn_Registry.txt
usefrom	HydroDyn.txt
usefrom	IceFloe_FASTRegistry.inp
usefrom	InflowWind.txt
usefrom	OpenFOAM_Registry.txt
usefrom	Registry_IceDyn.txt
usefrom	FEAM_Registry.txt
usefrom	MAP_Registry.txt
usefrom	MoorDyn_Registry.txt
usefrom	OrcaFlexInterface.txt

# ...... Constants ............................................................................

# MODULE IDENTIFIERS:
# NOTE WELL: The order of these modules is the order they get written to the output file;
# Make sure the module identifiers start at 1 and that this order matches the orders in WrOutputLine and FAST_InitOutput!!!
param	FAST	-	INTEGER	Module_Unknown	-	-1	-	"Unknown"	-
param	^	-	INTEGER	Module_None	-	0	-	"No module selected"	-
param	^	-	INTEGER	Module_IfW	-	1	-	"InflowWind"	-
param	^	-	INTEGER	Module_OpFM	-	2		"OpenFOAM"
param	^	-	INTEGER	Module_ED	-	3	-	"ElastoDyn"	-
param	^	-	INTEGER	Module_BD	-	4	-	"BeamDyn"	-
param	^	-	INTEGER	Module_AD14	-	5	-	"AeroDyn14"	-
param	^	-	INTEGER	Module_AD	-	6	-	"AeroDyn"	-
param	^	-	INTEGER	Module_SrvD	-	7	-	"ServoDyn"	-
param	^	-	INTEGER	Module_HD	-	8	-	"HydroDyn"	-
param	^	-	INTEGER	Module_SD	-	9	-	"SubDyn"	-
param	^	-	INTEGER	Module_MAP	-	10	-	"MAP (Mooring Analysis Program)"	-
param	^	-	INTEGER	Module_FEAM	-	11	-	"FEAMooring"	-
param	^	-	INTEGER	Module_MD	-	12	-	"MoorDyn"	-
param	^	-	INTEGER	Module_Orca	-	13		"OrcaFlex integration (HD/Mooring)"	#VALUE!
param	^	-	INTEGER	Module_IceF	-	14	-	"IceFloe"	-
param	^	-	INTEGER	Module_IceD	-	15	-	"IceDyn"	-
param	^	-	INTEGER	NumModules	-	15	-	"The number of modules available in FAST"	-
# Other Constants
param	^	-	INTEGER	MaxNBlades	-	3	-	"Maximum number of blades allowed on a turbine"	-
param	^	-	INTEGER	IceD_MaxLegs	-	4	-	"because I don't know how many legs there are before calling IceD_Init and I don't want to copy the data because of sibling mesh issues, I'm going to allocate IceD based on this number"	-

# ..... FAST_ParameterType data .......................................................................................................
# Misc data for coupling:
typedef	FAST	FAST_ParameterType	DbKi	DT	-	-	-	"Integration time step [global time]"	s
typedef	^	^	DbKi	DT_module	{NumModules}	-	-	"Integration time step [global time]"	s
typedef	^	^	IntKi	n_substeps	{NumModules}	-	-	"The number of module substeps for advancing states from t_global to t_global_next"	-
typedef	^	^	INTEGER	n_TMax_m1	-	-	-	"The time step of TMax - dt (the end time of the simulation)"	(-)
typedef	^	^	DbKi	TMax	-	-	-	"Total run time"	s
typedef	^	^	IntKi	InterpOrder	-	-	-	"Interpolation order {0,1,2}"	-
typedef	^	^	IntKi	NumCrctn	-	-	-	"Number of correction iterations"	-
typedef	^	^	IntKi	KMax	-	-	-	"Maximum number of input-output-solve iterations (KMax >= 1)"	-
typedef	^	^	IntKi	numIceLegs	-	-	-	"number of suport-structure legs in contact with ice (IceDyn coupling)"	-
typedef	^	^	IntKi	nBeams	-	-	-	"number of BeamDyn instances"	-
typedef	^	^	LOGICAL	ModuleInitialized	{NumModules}	-	-	"An array determining if the module has been initialized"	-
# Data for Jacobians:
typedef	^	^	DbKi	DT_Ujac	-	-	-	"Time between when we need to re-calculate these Jacobians"	s
typedef	^	^	Reki	UJacSclFact	-	-	-	"Scaling factor used to get similar magnitudes between accelerations, forces, and moments in Jacobians"	-
typedef	^	^	IntKi	SizeJac_ED_SD_HD_BD_Orca	{8}	-	-	"(1)=size of matrix; (2)=size of ED portion; (3)=size of SD portion [2 meshes]; (4)=size of HD portion; (5)=size of BD portion blade 1; (6)=size of BD portion blade 2; (7)=size of BD portion blade 3; (8)=size of Orca portion"	-
# Feature switches and flags:
typedef	^	^	IntKi	CompElast	-	-	-	"Compute blade loads (switch) {Module_ED; Module_BD}"	-
typedef	^	^	IntKi	CompInflow	-	-	-	"Compute inflow wind conditions (switch) {Module_None; Module_IfW; Module_OpFM}"	-
typedef	^	^	IntKi	CompAero	-	-	-	"Compute aerodynamic loads (switch) {Module_None; Module_AD14; Module_AD}"	-
typedef	^	^	IntKi	CompServo	-	-	-	"Compute control and electrical-drive dynamics (switch) {Module_None; Module_SrvD}"	-
typedef	^	^	IntKi	CompHydro	-	-	-	"Compute hydrodynamic loads (switch) {Module_None; Module_HD}"	-
typedef	^	^	IntKi	CompSub	-	-	-	"Compute sub-structural dynamics (switch) {Module_None; Module_HD}"	-
typedef	^	^	IntKi	CompMooring	-	-	-	"Compute mooring system (switch) {Module_None; Module_MAP; Module_FEAM; Module_MD; Module_Orca}"	-
typedef	^	^	IntKi	CompIce	-	-	-	"Compute ice loading (switch) {Module_None; Module_IceF, Module_IceD}"	-
typedef	^	^	LOGICAL	UseDWM	-	-	-	"Use the DWM module in AeroDyn"	-
# Input file names:
typedef	^	^	CHARACTER(1024)	EDFile	-	-	-	"The name of the ElastoDyn input file"	-
typedef	^	^	CHARACTER(1024)	BDBldFile	{MaxNBlades}	-	-	"Name of files containing BeamDyn inputs for each blade"	-
typedef	^	^	CHARACTER(1024)	InflowFile	-	-	-	"Name of file containing inflow wind input parameters"	-
typedef	^	^	CHARACTER(1024)	AeroFile	-	-	-	"Name of file containing aerodynamic input parameters"	-
typedef	^	^	CHARACTER(1024)	ServoFile	-	-	-	"Name of file containing control and electrical-drive input parameters"	-
typedef	^	^	CHARACTER(1024)	HydroFile	-	-	-	"Name of file containing hydrodynamic input parameters"	-
typedef	^	^	CHARACTER(1024)	SubFile	-	-	-	"Name of file containing sub-structural input parameters"	-
typedef	^	^	CHARACTER(1024)	MooringFile	-	-	-	"Name of file containing mooring system input parameters"	-
typedef	^	^	CHARACTER(1024)	IceFile	-	-	-	"Name of file containing ice loading input parameters"	-
#  Parameters for file/screen output
#typedef	^	^	DbKi	SttsTime	-	-	-	"Amount of time between screen status messages"	s
typedef	^	^	DbKi	TStart	-	-	-	"Time to begin tabular output"	s
typedef	^	^	DbKi	DT_Out	-	-	-	"Time step for tabular output"	s
typedef	^	^	INTEGER	n_SttsTime	-	-	-	"Number of time steps between screen status messages"	-
typedef	^	^	INTEGER	n_ChkptTime	-	-	-	"Number of time steps between writing checkpoint files"	-
typedef	^	^	IntKi	TurbineType	-	-	-	"Type_LandBased, Type_Offshore_Fixed, or Type_Offshore_Floating"	-
typedef	^	^	LOGICAL	WrBinOutFile	-	-	-	"Write a binary output file? (.outb)"	-
typedef	^	^	LOGICAL	WrTxtOutFile	-	-	-	"Write a text (formatted) output file? (.out)"	-
typedef	^	^	LOGICAL	SumPrint	-	-	-	"Print summary data to file? (.sum)"	-
typedef	^	^	LOGICAL	WrGraphics	-	-	-	"Write binary output files with mesh grahpics information? (.gra, .bin)"	-
typedef	^	^	CHARACTER(1)	Delim	-	-	-	"Delimiter between columns of text output file (.out): space or tab"	-
typedef	^	^	CHARACTER(20)	OutFmt	-	-	-	"Format used for text tabular output (except time); resulting field should be 10 characters"	-
typedef	^	^	CHARACTER(1024)	OutFileRoot	-	-	-	"The rootname of the output files"	-
typedef	^	^	CHARACTER(1024)	FTitle	-	-	-	"The description line from the FAST (glue-code) input file"	-

# ..... FAST_OutputFileType data .......................................................................................................
typedef	FAST	FAST_OutputFileType	DbKi	TimeData	{:}	-	-	"Array to contain the time output data for the binary file (first output time and a time [fixed] increment)"
typedef	^	^	ReKi	AllOutData	{:}{:}	-	-	"Array to contain all the output data (time history of all outputs); Index 1 is NumOuts, Index 2 is Time step"
typedef	^	^	IntKi	n_Out	-	-	-	"Time index into the AllOutData array"
typedef	^	^	IntKi	NOutSteps	-	-	-	"Maximum number of output steps"
typedef	^	^	IntKi	numOuts	{NumModules}	-	-	"number of outputs to print from each module"
typedef	^	^	IntKi	UnOu	-	-1	-	"I/O unit number for the tabular output file"
typedef	^	^	IntKi	UnSum	-	-1	-	"I/O unit number for the summary file"
typedef	^	^	IntKi	UnGra	-	-1	-	"I/O unit number for mesh graphics"
typedef	^	^	CHARACTER(1024)	FileDescLines	{3}	-	-	"Description lines to include in output files (header, time run, plus module names/versions)"
typedef	^	^	CHARACTER(ChanLen)	ChannelNames	{:}	-	-	"Names of the output channels"
typedef	^	^	CHARACTER(ChanLen)	ChannelUnits	{:}	-	-	"Units for the output channels"
typedef	^	^	ProgDesc	Module_Ver	{NumModules}	-	-	"version information from all modules"

# ..... IceDyn data .......................................................................................................
# [ the last dimension of each allocatable array is for the instance of IceDyn being used ]
# note that I'm making the allocatable-for-instance-used part INSIDE the data type (as opposed to an array of IceDyn_Data types) because I want to pass arrays of x, xd, z, x_pred, etc)
typedef	FAST	IceDyn_Data	IceD_ContinuousStateType	x	{:}{:}	-	-	"Continuous states"
typedef	^	^	IceD_DiscreteStateType	xd	{:}{:}	-	-	"Discrete states"
typedef	^	^	IceD_ConstraintStateType	z	{:}{:}	-	-	"Constraint states"
typedef	^	^	IceD_OtherStateType	OtherSt	{:}	-	-	"Other/optimization states"
typedef	^	^	IceD_ParameterType	p	{:}	-	-	"Parameters"
typedef	^	^	IceD_InputType	u	{:}	-	-	"System inputs"
typedef	^	^	IceD_OutputType	y	{:}	-	-	"System outputs"
typedef	^	^	IceD_OtherStateType	OtherSt_old	{:}	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	IceD_InputType	Input	{:}{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}{:}	-	-	"Array of times associated with Input Array"

# ..... BeamDyn data .......................................................................................................
# [ the last dimension of each allocatable array is for the instance of BeamDyn being used ]
# note that I'm making the allocatable-for-instance-used part INSIDE the data type (as opposed to an array of IceDyn_Data types) because I want to pass arrays of x, xd, z, x_pred, etc)
typedef	FAST	BeamDyn_Data	BD_ContinuousStateType	x	{:}{:}	-	-	"Continuous states"
typedef	^	^	BD_DiscreteStateType	xd	{:}{:}	-	-	"Discrete states"
typedef	^	^	BD_ConstraintStateType	z	{:}{:}	-	-	"Constraint states"
typedef	^	^	BD_OtherStateType	OtherSt	{:}{:}	-	-	"Other/optimization states"
typedef	^	^	BD_ParameterType	p	{:}	-	-	"Parameters"
typedef	^	^	BD_InputType	u	{:}	-	-	"System inputs"
typedef	^	^	BD_OutputType	y	{:}	-	-	"System outputs"
typedef	^	^	BD_InputType	Input	{:}{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}{:}	-	-	"Array of times associated with Input Array"

# ..... ElastoDyn data .......................................................................................................
typedef	FAST	ElastoDyn_Data	ED_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	ED_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	ED_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	ED_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	ED_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	ED_InputType	u	-	-	-	"System inputs"
typedef	^	^	ED_OutputType	y	-	-	-	"System outputs"
typedef	^	^	ED_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	ED_OutputType	Output	{:}	-	-	"Array of outputs associated with InputTimes"
typedef	^	^	ED_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"


# ..... ServoDyn data .......................................................................................................
typedef	FAST	ServoDyn_Data	SrvD_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	SrvD_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	SrvD_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	SrvD_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	SrvD_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	SrvD_InputType	u	-	-	-	"System inputs"
typedef	^	^	SrvD_OutputType	y	-	-	-	"System outputs"
typedef	^	^	SrvD_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	SrvD_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"
typedef	^	^	SrvD_OutputType	y_prev	-	-	-	"previous outputs; a hack because this basically makes them states. Used in BladedDLL"

# ..... AeroDyn14 data .......................................................................................................
typedef	FAST	AeroDyn14_Data	AD14_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	AD14_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	AD14_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	AD14_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	AD14_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	AD14_InputType	u	-	-	-	"System inputs"
typedef	^	^	AD14_OutputType	y	-	-	-	"System outputs"
typedef	^	^	AD14_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	AD14_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... AeroDyn data .......................................................................................................
typedef	FAST	AeroDyn_Data	AD_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	AD_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	AD_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	AD_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	AD_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	AD_InputType	u	-	-	-	"System inputs"
typedef	^	^	AD_OutputType	y	-	-	-	"System outputs"
typedef	^	^	AD_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	AD_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... InflowWind data .......................................................................................................
typedef	FAST	InflowWind_Data	InflowWind_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	InflowWind_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	InflowWind_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	InflowWind_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	InflowWind_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	InflowWind_InputType	u	-	-	-	"System inputs"
typedef	^	^	InflowWind_OutputType	y	-	-	-	"System outputs"
typedef	^	^	InflowWind_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	InflowWind_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... OpenFOAM integration data .......................................................................................................
typedef	FAST	OpenFOAM_Data	OpFM_InputType	u	-	-	-	"System inputs"
typedef	^	^	OpFM_OutputType	y	-	-	-	"System outputs"
typedef	^	^	OpFM_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	OpFM_MiscVarType	m	-	-	-	"Parameters"

# ..... SubDyn data .......................................................................................................
typedef	FAST	SubDyn_Data	SD_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	SD_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	SD_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	SD_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	SD_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	SD_InputType	u	-	-	-	"System inputs"
typedef	^	^	SD_OutputType	y	-	-	-	"System outputs"
typedef	^	^	SD_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	SD_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... HydroDyn data .......................................................................................................
typedef	FAST	HydroDyn_Data	HydroDyn_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	HydroDyn_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	HydroDyn_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	HydroDyn_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	HydroDyn_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	HydroDyn_InputType	u	-	-	-	"System inputs"
typedef	^	^	HydroDyn_OutputType	y	-	-	-	"System outputs"
typedef	^	^	HydroDyn_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	HydroDyn_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... IceFloe data .......................................................................................................
typedef	FAST	IceFloe_Data	IceFloe_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	IceFloe_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	IceFloe_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	IceFloe_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	IceFloe_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	IceFloe_InputType	u	-	-	-	"System inputs"
typedef	^	^	IceFloe_OutputType	y	-	-	-	"System outputs"
typedef	^	^	IceFloe_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	IceFloe_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... MAP data .......................................................................................................
typedef	FAST	MAP_Data	MAP_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	MAP_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	MAP_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	MAP_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	MAP_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	MAP_InputType	u	-	-	-	"System inputs"
typedef	^	^	MAP_OutputType	y	-	-	-	"System outputs"
typedef	^	^	MAP_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	MAP_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... FEAMooring data .......................................................................................................
typedef	FAST	FEAMooring_Data	FEAM_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	FEAM_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	FEAM_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	FEAM_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	FEAM_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	FEAM_InputType	u	-	-	-	"System inputs"
typedef	^	^	FEAM_OutputType	y	-	-	-	"System outputs"
typedef	^	^	FEAM_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	FEAM_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... MoorDyn data .......................................................................................................
typedef	FAST	MoorDyn_Data	MD_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	MD_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	MD_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	MD_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	MD_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	MD_InputType	u	-	-	-	"System inputs"
typedef	^	^	MD_OutputType	y	-	-	-	"System outputs"
typedef	^	^	MD_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	MD_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... OrcaFlex data .......................................................................................................
typedef	FAST	OrcaFlex_Data	Orca_ContinuousStateType	x	{2}	-	-	"Continuous states"
typedef	^	^	Orca_DiscreteStateType	xd	{2}	-	-	"Discrete states"
typedef	^	^	Orca_ConstraintStateType	z	{2}	-	-	"Constraint states"
typedef	^	^	Orca_OtherStateType	OtherSt	-	-	-	"Other/optimization states"
typedef	^	^	Orca_ParameterType	p	-	-	-	"Parameters"
typedef	^	^	Orca_InputType	u	-	-	-	"System inputs"
typedef	^	^	Orca_OutputType	y	-	-	-	"System outputs"
typedef	^	^	Orca_OtherStateType	OtherSt_old	-	-	-	"Other/optimization states (copied for the case of subcycling)"
typedef	^	^	Orca_InputType	Input	{:}	-	-	"Array of inputs associated with InputTimes"
typedef	^	^	DbKi	InputTimes	{:}	-	-	"Array of times associated with Input Array"

# ..... FAST_ModuleMapType data .......................................................................................................
# ! Data structures for mapping and coupling the various modules together
# ED <-> BD
typedef	FAST	FAST_ModuleMapType	MeshMapType	ED_P_2_BD_P	{:}	-	-	"Map ElastoDyn BladeRootMotion meshes to BeamDyn RootMotion point meshes"
typedef	FAST	FAST_ModuleMapType	MeshMapType	BD_P_2_ED_P	{:}	-	-	"Map BeamDyn ReactionForce loads point meshes to ElastoDyn HubPtLoad point mesh"
typedef	FAST	FAST_ModuleMapType	MeshMapType	ED_P_2_BD_P_Hub	{:}	-	-	"ElastoDyn hub to BeamDyn for hub orientation necessary for pitch actuator"
# ED <-> HD
typedef	FAST	FAST_ModuleMapType	MeshMapType	ED_P_2_HD_W_P	-	-	-	"Map ElastoDyn PlatformPtMesh to HydroDyn WAMIT Point"
typedef	^	FAST_ModuleMapType	MeshMapType	HD_W_P_2_ED_P	-	-	-	"Map HydroDyn WAMIT Point (from either y%Mesh or y%AllHydroOrigin) to ElastoDyn PlatformPtMesh"
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_HD_M_P	-	-	-	"Map ElastoDyn PlatformPtMesh to HydroDyn Morison Point"
typedef	^	FAST_ModuleMapType	MeshMapType	HD_M_P_2_ED_P	-	-	-	"Map HydroDyn Morison Point to ElastoDyn PlatformPtMesh"
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_HD_M_L	-	-	-	"Map ElastoDyn PlatformPtMesh to HydroDyn Morison Line2"
typedef	^	FAST_ModuleMapType	MeshMapType	HD_M_L_2_ED_P	-	-	-	"Map HydroDyn Morison Line2 to ElastoDyn PlatformPtMesh"
# ED <-> Mooring (MAP, FEAM, MoorDyn, OrcaFlex)
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_Mooring_P	-	-	-	"Map ElastoDyn PlatformPtMesh to MAP/FEAM/MoorDyn/OrcaFlex point mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	Mooring_P_2_ED_P	-	-	-	"Map FEAM/MAP/MoorDyn/OrcaFlex point mesh to ElastoDyn PlatformPtMesh"
# ED <-> SD
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_SD_TP	-	-	-	"Map ElastoDyn PlatformPtMesh to SubDyn transition-piece point mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	SD_TP_2_ED_P	-	-	-	"Map SubDyn transition-piece point mesh to ElastoDyn PlatformPtMesh"
# SD <-> HD
typedef	^	FAST_ModuleMapType	MeshMapType	SD_P_2_HD_M_P	-	-	-	"Map SubDyn y2Mesh Point to HydroDyn Morison Point"
typedef	^	FAST_ModuleMapType	MeshMapType	HD_M_P_2_SD_P	-	-	-	"Map HydroDyn Morison Point to SubDyn y2Mesh Point"
typedef	^	FAST_ModuleMapType	MeshMapType	SD_P_2_HD_M_L	-	-	-	"Map SubDyn y2Mesh Point to HydroDyn Morison Line2"
typedef	^	FAST_ModuleMapType	MeshMapType	HD_M_L_2_SD_P	-	-	-	"Map HydroDyn Morison Line2 to SubDyn y2Mesh Point"
# ED <-> SrvD/NTMD
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_SrvD_P_N	-	-	-	"Map ElastoDyn Nacelle point mesh to ServoDyn/TMD point mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	SrvD_P_2_ED_P_N	-	-	-	"Map ServoDyn nacelle point mesh to ElastoDyn point mesh on the nacelle"
# ED/BD <-> AD (blades)
typedef	^	FAST_ModuleMapType	MeshMapType	BDED_L_2_AD_L_B	{:}	-	-	"Map ElastoDyn BladeLn2Mesh line2 meshes OR BeamDyn BldMotion line2 meshes to AeroDyn14 InputMarkers OR AeroDyn BladeMotion line2 meshes"
typedef	^	FAST_ModuleMapType	MeshMapType	AD_L_2_BDED_L_B	{:}	-	-	"Map AeroDyn14 InputMarkers or AeroDyn BladeLoad line2 meshes to ElastoDyn BladeLn2Mesh line2 meshes or BeamDyn BldMotion line2 meshes"
typedef	^	FAST_ModuleMapType	MeshMapType	BD_L_2_BD_L	{:}	-	-	"Map BeamDyn BldMotion output meshes to locations on the BD input DistrLoad mesh stored in MeshMapType%y_BD_BldMotion_4Loads (BD input and output meshes are not siblings and in fact have nodes at different locations"
# ED <-> AD (tower, hub, blade root)
typedef	^	FAST_ModuleMapType	MeshMapType	ED_L_2_AD_L_T	-	-	-	"Map ElastoDyn TowerLn2Mesh line2 mesh to AeroDyn14 Twr_InputMarkers or AeroDyn TowerMotion line2 mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	AD_L_2_ED_L_T	-	-	-	"Map AeroDyn14 Twr_InputMarkers or AeroDyn TowerLoad line2 mesh to ElastoDyn TowerLn2Mesh line2 mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_AD_P_R	{:}	-	-	"Map ElastoDyn BladeRootMotion point meshes to AeroDyn BladeRootMotion point meshes"
typedef	^	FAST_ModuleMapType	MeshMapType	ED_P_2_AD_P_H	-	-	-	"Map ElastoDyn HubPtMotion point mesh to AeroDyn HubMotion point mesh"
# IceF <-> SD
typedef	^	FAST_ModuleMapType	MeshMapType	IceF_P_2_SD_P	-	-	-	"Map IceFloe point mesh to SubDyn y2Mesh point mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	SD_P_2_IceF_P	-	-	-	"Map SubDyn y2Mesh point mesh to IceFloe point mesh"
# IceD <-> SD
typedef	^	FAST_ModuleMapType	MeshMapType	IceD_P_2_SD_P	{:}	-	-	"Map IceDyn point mesh to SubDyn y2Mesh point mesh"
typedef	^	FAST_ModuleMapType	MeshMapType	SD_P_2_IceD_P	{:}	-	-	"Map SubDyn y2Mesh point mesh to IceDyn point mesh"
# Stored Jacobians:
typedef	^	FAST_ModuleMapType	ReKi	Jacobian_ED_SD_HD_BD	{:}{:}	-	-	"Stored Jacobian in ED_HD_InputOutputSolve or ED_SD_HD_BD_InputOutputSolve"
typedef	^	FAST_ModuleMapType	Integer	Jacobian_pivot	{:}	-	-	"Pivot array used for LU decomposition of Jacobian_ED_SD_HD_BD"
typedef	^	FAST_ModuleMapType	Integer	Jac_u_indx	{:}{:}	-	-	"matrix to help fill/pack the u vector in computing the jacobian"
# Temporary copies of input meshes (stored here so we don't have to keep allocating/destroying them)
typedef	^	FAST_ModuleMapType	MeshType	u_ED_PlatformPtMesh	-	-	-	"copy of ED input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_ED_PlatformPtMesh_2	-	-	-	"copy of ED input mesh (used only for temporary storage)"
typedef	^	FAST_ModuleMapType	MeshType	u_SD_TPMesh	-	-	-	"copy of SD input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_SD_LMesh	-	-	-	"copy of SD input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_SD_LMesh_2	-	-	-	"copy of SD input mesh (used only for temporary storage)"
typedef	^	FAST_ModuleMapType	MeshType	u_HD_M_LumpedMesh	-	-	-	"copy of HD input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_HD_M_DistribMesh	-	-	-	"copy of HD input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_HD_Mesh	-	-	-	"copy of HD input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_ED_HubPtLoad	-	-	-	"copy of  ED input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_ED_HubPtLoad_2	-	-	-	"copy of  ED input mesh"
typedef	^	FAST_ModuleMapType	MeshType	u_BD_RootMotion	{:}	-	-	"copy of  BD input meshes"
typedef	^	FAST_ModuleMapType	MeshType	y_BD_BldMotion_4Loads	{:}	-	-	"BD blade motion output at locations on DistrLoad input meshes"
typedef	^	FAST_ModuleMapType	MeshType	u_Orca_PtfmMesh	-	-	-	"copy of Orca PtfmMesh input mesh"
# ..... FAST_ExternalInput data .......................................................................................................
typedef	FAST	FAST_ExternInputType	ReKi	GenTrq	-	-	-	"generator torque input from Simulink/Labview"
typedef	^	FAST_ExternInputType	ReKi	ElecPwr	-	-	-	"electric poser input from Simulink/Labview"
typedef	^	FAST_ExternInputType	ReKi	YawPosCom	-	-	-	"yaw position command from Simulink/Labview"
typedef	^	FAST_ExternInputType	ReKi	YawRateCom	-	-	-	"yaw rate command from Simulink/Labview"
typedef	^	FAST_ExternInputType	ReKi	BlPitchCom	3	-	-	"blade pitch commands from Simulink/Labview"	"rad/s"
typedef	^	FAST_ExternInputType	ReKi	HSSBrFrac	-	-	-	"Fraction of full braking torque: 0 (off) <= HSSBrFrac <= 1 (full) from Simulink or LabVIEW"
typedef	^	FAST_ExternInputType	ReKi	LidarFocus	3	-	-	"lidar focus (relative to lidar location)"	m

# ..... FAST_MiscVarType data .......................................................................................................
typedef	FAST	FAST_MiscVarType	DbKi	TiLstPrn	-	-	-	"The simulation time of the last print (to file)"	(s)
typedef	^	FAST_MiscVarType	DbKi	t_global	-	-	-	"Current simulation time (for global/FAST simulation)"	(s)
typedef	^	FAST_MiscVarType	DbKi	NextJacCalcTime	-	-	-	"Time between calculating Jacobians in the HD-ED and SD-ED simulations"	(s)
typedef	^	FAST_MiscVarType	ReKi	PrevClockTime	-	-	-	"Clock time at start of simulation in seconds"	(s)
typedef	^	FAST_MiscVarType	ReKi	UsrTime1	-	-	-	"User CPU time for simulation initialization"	(s)
typedef	^	FAST_MiscVarType	ReKi	UsrTime2	-	-	-	"User CPU time for simulation (without intialization)"	(s)
typedef	^	FAST_MiscVarType	INTEGER	StrtTime	{8}	-	-	"Start time of simulation (including intialization)"
typedef	^	FAST_MiscVarType	INTEGER	SimStrtTime	{8}	-	-	"Start time of simulation (after initialization)"
#typedef	^	FAST_MiscVarType	IntKi	n_t_global	-	-	-	"simulation time step, loop counter for global (FAST) simulation"	(s)
typedef	^	FAST_MiscVarType	Logical	calcJacobian	-	-	-	"Should we calculate Jacobians in Option 1?"	(flag)
typedef	^	FAST_MiscVarType	FAST_ExternInputType	ExternInput	-	-	-	"external input values"	-

# ..... FAST External Initialization Input data .......................................................................................................
typedef	^	FAST_ExternInitType	DbKi	Tmax	-	-1	-	"External code specified Tmax"	s
typedef	^	FAST_ExternInitType	IntKi	SensorType	-	SensorType_None	-	"lidar sensor type, which should not be pulsed at the moment; this input should be replaced with a section in the InflowWind input file"	-
typedef	^	FAST_ExternInitType	LOGICAL	LidRadialVel	-	-	-	"TRUE => return radial component, FALSE => return 'x' direction estimate"	-
typedef	^	FAST_ExternInitType	IntKi	TurbineID	-	-	-	"ID number for turbine (used to create output file naming convention)"	-
typedef	^	FAST_ExternInitType	ReKi	TurbinePos	{3}	-	-	"Initial position of turbine base (origin used in future for graphics)"	m
typedef	^	FAST_ExternInitType	IntKi	NumSCin	-	-	-	"number of controller inputs [from supercontroller]"	-
typedef	^	FAST_ExternInitType	IntKi	NumSCout	-	-	-	"number of controller outputs [to supercontroller]"	-

# ..... FAST Turbine Data (one realization) .......................................................................................................
typedef	^	FAST_TurbineType	IntKi	TurbID	-	1	-	"Turbine ID Number"	-
typedef	^	FAST_TurbineType	FAST_ParameterType	p_FAST	-	-	-	"Parameters for the glue code"	-
typedef	^	FAST_TurbineType	FAST_OutputFileType	y_FAST	-	-	-	"Output variables for the glue code"	-
typedef	^	FAST_TurbineType	FAST_MiscVarType	m_FAST	-	-	-	"Miscellaneous variables"	-
typedef	^	FAST_TurbineType	FAST_ModuleMapType	MeshMapData	-	-	-	"Data for mapping between modules"	-
typedef	^	FAST_TurbineType	ElastoDyn_Data	ED	-	-	-	"Data for the ElastoDyn module"	-
typedef	^	FAST_TurbineType	BeamDyn_Data	BD	-	-	-	"Data for the BeamDyn module"	-
typedef	^	FAST_TurbineType	ServoDyn_Data	SrvD	-	-	-	"Data for the ServoDyn module"	-
typedef	^	FAST_TurbineType	AeroDyn_Data	AD	-	-	-	"Data for the AeroDyn module"	-
typedef	^	FAST_TurbineType	AeroDyn14_Data	AD14	-	-	-	"Data for the AeroDyn14 module"	-
typedef	^	FAST_TurbineType	InflowWind_Data	IfW	-	-	-	"Data for InflowWind module"	-
typedef	^	FAST_TurbineType	OpenFOAM_Data	OpFM	-	-	-	"Data for OpenFOAM integration module"	-
typedef	^	FAST_TurbineType	HydroDyn_Data	HD	-	-	-	"Data for the HydroDyn module"	-
typedef	^	FAST_TurbineType	SubDyn_Data	SD	-	-	-	"Data for the SubDyn module"	-
typedef	^	FAST_TurbineType	MAP_Data	MAP	-	-	-	"Data for the MAP (Mooring Analysis Program) module"	-
typedef	^	FAST_TurbineType	FEAMooring_Data	FEAM	-	-	-	"Data for the FEAMooring module"	-
typedef	^	FAST_TurbineType	MoorDyn_Data	MD	-	-	-	"Data for the MoorDyn module"	-
typedef	^	FAST_TurbineType	OrcaFlex_Data	Orca	-	-	-	"Data for the OrcaFlex interface module"	-
typedef	^	FAST_TurbineType	IceFloe_Data	IceF	-	-	-	"Data for the IceFloe module"	-
typedef	^	FAST_TurbineType	IceDyn_Data	IceD	-	-	-	"Data for the IceDyn module"	-
